[
  {
    "objectID": "example1.html",
    "href": "example1.html",
    "title": "example1",
    "section": "",
    "text": "library(rstac)\nlibrary(gdalcubes)\nlibrary(stars)\n\nLoading required package: abind\n\n\nLoading required package: sf\n\n\nLinking to GEOS 3.12.1, GDAL 3.8.2, PROJ 9.3.1; sf_use_s2() is TRUE\n\nlibrary(tmap)\n\n\nAttaching package: 'tmap'\n\n\nThe following object is masked from 'package:datasets':\n\n    rivers\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\nbox &lt;- c(xmin=-122.51, ymin=37.71, xmax=-122.36, ymax=37.81) \nstart_date &lt;- \"2022-06-01\"\nend_date &lt;- \"2022-08-01\"\nitems &lt;-\n  stac(\"https://earth-search.aws.element84.com/v0/\") |&gt;\n  stac_search(collections = \"sentinel-s2-l2a-cogs\",\n              bbox = box,\n              datetime = paste(start_date, end_date, sep=\"/\"),\n              limit = 100) |&gt;\n  ext_query(\"eo:cloud_cover\" &lt; 20) |&gt;\n  post_request()\n\n\ncol &lt;- stac_image_collection(items$features, asset_names = c(\"B08\", \"B04\", \"SCL\"))\n\nWarning in stac_image_collection(items$features, asset_names = c(\"B08\", : STAC\nasset with name 'SCL' does not include eo:bands metadata and will be considered\nas a single band source\n\ncube &lt;- cube_view(srs =\"EPSG:4326\",\n                  extent = list(t0 = start_date, t1 = end_date,\n                                left = box[1], right = box[3],\n                                top = box[4], bottom = box[2]),\n                  dx = 0.0001, dy = 0.0001, dt = \"P1D\",\n                  aggregation = \"median\", resampling = \"average\")\n\nmask &lt;- image_mask(\"SCL\", values=c(3, 8, 9)) # mask clouds and cloud shadows\n\ndata &lt;-  raster_cube(col, cube, mask = mask)\n\n\nndvi &lt;- data |&gt;\n  select_bands(c(\"B04\", \"B08\")) |&gt;\n  apply_pixel(\"(B08-B04)/(B08+B04)\", \"NDVI\") |&gt;\n  reduce_time(c(\"mean(NDVI)\"))\n\nndvi_stars &lt;- st_as_stars(ndvi)\n\n\nmako &lt;- tm_scale_continuous(values = viridisLite::mako(30))\nfill &lt;- tm_scale_continuous(values = \"Greens\")\n\ntm_shape(ndvi_stars) + tm_raster(col.scale = mako)\n\nWarning in value[[3L]](cond): could not rename the data.table\n\n\n\n\n\n#zonal stats\n\nsf &lt;- st_read(\"/vsicurl/https://dsl.richmond.edu/panorama/redlining/static/citiesData/CASanFrancisco1937/geojson.json\") |&gt;\n  st_make_valid() |&gt; select(-label_coords)\n\nReading layer `geojson' from data source \n  `/vsicurl/https://dsl.richmond.edu/panorama/redlining/static/citiesData/CASanFrancisco1937/geojson.json' \n  using driver `GeoJSON'\nSimple feature collection with 98 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -122.5108 ymin: 37.70801 xmax: -122.3627 ymax: 37.80868\nGeodetic CRS:  WGS 84\n\npoly &lt;- ndvi |&gt; extract_geom(sf, FUN = mean, reduce_time = TRUE)\nsf$NDVI &lt;- poly$NDVI\n\n\ntm_shape(ndvi_stars) + tm_raster(col.scale = mako) +\n  tm_shape(sf) + tm_polygons('NDVI', fill.scale = fill) +\n  tm_shape(sf) + tm_text(\"grade\", col=\"darkblue\", size=0.6) +\n  tm_legend_hide()\n\nWarning: v3 code detected: as of tmap v4, tm_legend should be specified per\nvisual variable (e.g. with the argument fill.legend of tm_polygons\n\n\nWarning in value[[3L]](cond): could not rename the data.table\n\n\n\n\n\n\nsf |&gt; \n  as_tibble() |&gt;\n  group_by(grade) |&gt; \n  summarise(ndvi = mean(NDVI), \n            sd = sd(NDVI)) |&gt;\n  knitr::kable()\n\n\n\n\ngrade\nndvi\nsd\n\n\n\n\nA\n0.3201176\n0.0611433\n\n\nB\n0.2138512\n0.0783237\n\n\nC\n0.1956326\n0.0564807\n\n\nD\n0.1949794\n0.0385861\n\n\nNA\n0.0962092\nNA"
  },
  {
    "objectID": "contents/intro.html",
    "href": "contents/intro.html",
    "title": "Examining Environmental Justice through Open Source, Cloud-Native Tools",
    "section": "",
    "text": "This executable notebook provides an opening example to illustrate a cloud-native workflow in both R and python. Pedagogy research emphasizes the importance of “playing the whole game” before breaking down every pitch and hit. We intentionally focus on powerful high-level tools (STAC API, COGs, datacubes) to illustrate how a few chunks of code can perform a task that would be far slower and more verbose in a traditional file-based, download-first workflow. Note the close parallels between R and Python syntax. This arises because both languages wrap the same underlying tools (the STAC API and GDAL warper) and handle many of the nuisances of spatial data – from re-projections and resampling to mosaic tiles – without us noticing.\n:::\nWe pass this list of images to a high-level utilty (gdalcubes in R, odc.stac in python) that will do all of the heavy lifting. Using the URLs and metadata provided by STAC, these functions can extract only our data of interest (given by the bounding box) without downloading unnecessary regions or bands. While streaming the data, these functions will also reproject it into the desired coordinate reference system – (an often costly operation to perform in R) and can potentially resample or aggregate the data to a desired spatial resolution. (The R code will also resample from images in overlapping areas to replace pixels masked by clouds)\nWe can do arbitrary calculations on this data as well. Here we calculate NDVI, a widely used measure of greenness that can be used to determine tree cover. (Note that the R example uses lazy evaluation, and can thus perform these calculations while streaming)\nAnd we plot the result. The long rectangle of Golden Gate Park is clearly visible in the North-West."
  },
  {
    "objectID": "contents/intro.html#zonal-statistics",
    "href": "contents/intro.html#zonal-statistics",
    "title": "Examining Environmental Justice through Open Source, Cloud-Native Tools",
    "section": "Zonal statistics",
    "text": "Zonal statistics\nIn addition to large scale raster data such as satellite imagery, the analysis of vector shapes such as polygons showing administrative regions is a central component of spatial analysis, and particularly important to spatial social sciences. The red-lined areas of the 1930s are one example of spatial vectors. One common operation is to summarise the values of all pixels falling within a given polygon, e.g. computing the average greenness (NDVI)\n\nR\n\n\n\nsf &lt;- st_read(\"/vsicurl/https://dsl.richmond.edu/panorama/redlining/static/citiesData/CASanFrancisco1937/geojson.json\") |&gt;\n  st_make_valid() |&gt; select(-label_coords)\npoly &lt;- ndvi |&gt; extract_geom(sf, FUN = mean, reduce_time = TRUE)\nsf$NDVI &lt;- poly$NDVI\n\n\n\n\nWe plot the underlying NDVI as well as the average NDVI of each polygon, along with it’s textual grade, using tmap. Note that “A” grades tend to be darkest green (high NDVI) while “D” grades are frequently the least green. (Regions not zoned for housing at the time of the 1937 housing assessment are not displayed as polygons.)\n\nR\n\n\n\ntm_shape(ndvi_stars) + tm_raster(col.scale = mako) +\n  tm_shape(sf) + tm_polygons('NDVI', fill.scale = fill) +\n  tm_shape(sf) + tm_text(\"grade\", col=\"darkblue\", size=0.6) +\n  tm_legend_hide()\n\n\n\n\n\n\n\nAre historically redlined areas still less green?\n\nR\n\n\n\nsf |&gt; \n  as_tibble() |&gt;\n  group_by(grade) |&gt; \n  summarise(ndvi = mean(NDVI), \n            sd = sd(NDVI)) |&gt;\n  knitr::kable()\n\n\n\n\ngrade\nndvi\nsd\n\n\n\n\nA\n0.3201204\n0.0611414\n\n\nB\n0.2138481\n0.0783211\n\n\nC\n0.1956285\n0.0564827\n\n\nD\n0.1949750\n0.0385796\n\n\nNA\n0.0962092\nNA"
  }
]